// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	HealthCheck(ctx echo.Context) error

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW8bydH+K4V+3+NkqNiLHHiK1/YiArK2EmdzWftQ6i5yyumPUXc1ZcHgfw+qe/gh",
	"i2snSJAskItIDbu6nnrqqY/5bGwKc4oUpZj1Z1PsRAHb19c5p6xf5pxmysLUHtvkSD83KQcUszYc5fkz",
	"Mxh5mKn/S1vKZj+YQKXgtp1efiySOW7Nfj+YTHeVMzmz/rnfeTr/4XhZuv1IVvSuN3R/Q/IUTsRwycFg",
	"BLffdtysL7lbfKH3bzdm/fNn8/+ZNmZt/m914mu1kLVasO2HL8Gx+5Kp3313gakvQLG7AOnDXo9x3KSe",
	"hChoG0QKyN6sDc4shOH35R63W8ojJzMs7Jh3/Rm8uLmGvxAGM5ia1WgSmder1ZnNfjCOis08C6do1uYF",
	"FAyzp2YsEwrUQgUQZpIiKRNgAYxAn/oxSeAopFgkoxBsCKVmKsARZCJ4O1PUm56PV1Bmsrxhi83VYDxb",
	"ioVOaTUvZrQTwbPx6hHksl6t7u/vR2w/jylvV4ttWf3x+uXrN+9e/+bZeDVOEnzTAuVQ3m7eUd6xpUtx",
	"r9qRlSaHxZ9zdrOEaQazo1w6Kb8dr8YrvTnNFHFmszbP26PBzChTS/5K/2y7jh5T+meSmmOBZ1dXcM8y",
	"NfrCLA+QqcwpFhrhp0KuMQsToZcJ7ET2b51dxcqRgDeN0tLDAi5Q59E0ULlxeu3M2vyh2b9Uc6NC6x4a",
	"xGdXV0/RnV3XXT90UWywejmIj2Kvj3n2S/5WH4uaH1qIfvtazfTu0kT92H2N9GkmK+SADmf2g1mp3L7J",
	"KHrfdAmbnEIn56EIhS5c/b8WyjApsdZSKSDpfXyDAZRum6LjQFFqACoywo9IliIWEApzylBwyyJcoODM",
	"FAeIZCFPKdpaoFA4O8ACGEhGeEGRMAIKbDPu2CFg3VYaAC0w2uq5mY7wsma8ZakZkuMEPmUKA6QcMRPQ",
	"lgTI04Iukh3A1lxqAXbgyUotI7yqXCAwSM0zlwHm6nccMasvykmDHkA4WnY1Cuwwcy3wsRZJI1xHmNDC",
	"pCCwFILZoxCCYys1KB3XvWFpLOh45mI5bgGjaDSn2D1vq8dj5POEmSTjgUQ9DyF5KsIEHGbKjpWpv/IO",
	"Qw8IPd9VDOAYlZmMBe40th15FogpgqQsKSslvKHojt5HuMlIhaIoTIocTgBqjgi75KvMKLCjSBEVcCdX",
	"/wSsWe+4jqebN5QX1jdo2XN55KR50D/DKb8WSnLoSRPrBuXRakFqYPo5wrtaZoqOlWWPKh6XfMqDKrCo",
	"9lUFGmWTikY9wI4mttUj6NjIrgbwfEs5jfBjyrcMVLmE5M7ToD83YXu0HBnH9/F9fEeuZaIW2JCKz6fb",
	"lJsBpZNicpVcwwhaGwHbhQv5XPwAVB9VS085+Ko6VHWOcDNhIe97YcyUF/NGc0svCWywWr6tnXA8+NFz",
	"5/Y78kvqeEc54/DYtdYJsBuOhRj5dhrhJ4GZvKcoVO4qwZxKJa2kQxGNoFTgoQq06A5cHm46hNWYHBqQ",
	"oyxijRYkcxGNBXYsSCP8UIslIGndwFU+VoF2imLJU+YGp+v3YBBULRWbeGwNBSME3GrI5JdsjfCn2k1D",
	"8pq3nj2qXTsnKMOx+QBWq0XSTy7y7GEv4liazLEaVSyaYOA4nKAshRu58AFwUQyWpTpWqKUgVDnobElk",
	"9/SItOZvhJvzxDTmFoxzJuEazjpXF00dzvStrXd8H58Muh84Op3WbQhnJYByacvb42EhuNW+Dxv2Qhlu",
	"H4wuVmZt7irlh9PWpOfMcDbPWCiUy8tmf4A5Y5uWRR7aEqGrX9sLHyMI+ImDtvEabilD2ujgr14arNxm",
	"2S9g8hxYHoH65h6+/3B56v/DY/wY9tfmeV+AvyDi6XSfSY5Lzn99rRjMnMqFbeJlJpS240a6133isLy2",
	"RVDHbIenR3T/9T7dk3uixxdO5Wj6ck9Fvk/u4d8W6OGd42mkNyQqI3ROP46wzflLhuRK+39RFt9Uw688",
	"+4elcvWZ3b6LwJPQUzn05yqHwnHrqSniFrVXpq6L61dQqqK+oIJXzboL4att6fqVNoK5Z2/BsjQBfac4",
	"9QB2T3L5Sw3h8uvm04bw3dOoFUhH4X4Fhfr1rb9v9ceUHBN1/Wo4vCS1Ey5RgZgEJtzR6Q2gHZhbhi5O",
	"lO8frt0/lb0NiZ3+Y8n7Hyvb/f7vAQAA///n2/dWtRIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

