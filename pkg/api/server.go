// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

